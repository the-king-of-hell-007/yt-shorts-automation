{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNaiO8NpeUnhvokDo8aStpG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install --no-cache-dir moviepy==1.0.3\n","!pip install --quiet gtts pydub google-generativeai google-auth google-api-python-client\n","!apt install ffmpeg -y\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6IU7eHZ6pw4U","executionInfo":{"status":"ok","timestamp":1750696686213,"user_tz":-330,"elapsed":16591,"user":{"displayName":"Ashwin Chintu","userId":"13617122690404780091"}},"outputId":"82c165d9-4004-4e9f-8e58-8bf3230ead9d"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: moviepy==1.0.3 in /usr/local/lib/python3.11/dist-packages (1.0.3)\n","Requirement already satisfied: decorator<5.0,>=4.0.2 in /usr/local/lib/python3.11/dist-packages (from moviepy==1.0.3) (4.4.2)\n","Requirement already satisfied: tqdm<5.0,>=4.11.2 in /usr/local/lib/python3.11/dist-packages (from moviepy==1.0.3) (4.67.1)\n","Requirement already satisfied: requests<3.0,>=2.8.1 in /usr/local/lib/python3.11/dist-packages (from moviepy==1.0.3) (2.32.3)\n","Requirement already satisfied: proglog<=1.0.0 in /usr/local/lib/python3.11/dist-packages (from moviepy==1.0.3) (0.1.12)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.11/dist-packages (from moviepy==1.0.3) (2.0.2)\n","Requirement already satisfied: imageio<3.0,>=2.5 in /usr/local/lib/python3.11/dist-packages (from moviepy==1.0.3) (2.37.0)\n","Requirement already satisfied: imageio-ffmpeg>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from moviepy==1.0.3) (0.6.0)\n","Requirement already satisfied: pillow>=8.3.2 in /usr/local/lib/python3.11/dist-packages (from imageio<3.0,>=2.5->moviepy==1.0.3) (11.2.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.8.1->moviepy==1.0.3) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.8.1->moviepy==1.0.3) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.8.1->moviepy==1.0.3) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0,>=2.8.1->moviepy==1.0.3) (2025.6.15)\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","ffmpeg is already the newest version (7:4.4.2-0ubuntu0.22.04.1).\n","0 upgraded, 0 newly installed, 0 to remove and 35 not upgraded.\n"]}]},{"cell_type":"code","source":["import os\n","import re\n","import json\n","import random\n","import datetime\n","\n","from moviepy.editor import *\n","from gtts import gTTS\n","from pydub import AudioSegment\n","import google.generativeai as genai"],"metadata":{"id":"LgHfebPAp1QC","executionInfo":{"status":"ok","timestamp":1750696688287,"user_tz":-330,"elapsed":20,"user":{"displayName":"Ashwin Chintu","userId":"13617122690404780091"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["from google.colab import auth\n","auth.authenticate_user()"],"metadata":{"id":"CJlPoqSTp3VX","executionInfo":{"status":"ok","timestamp":1750696694291,"user_tz":-330,"elapsed":263,"user":{"displayName":"Ashwin Chintu","userId":"13617122690404780091"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fdtLmQ_0p5aX","executionInfo":{"status":"ok","timestamp":1750696717238,"user_tz":-330,"elapsed":1770,"user":{"displayName":"Ashwin Chintu","userId":"13617122690404780091"}},"outputId":"3d81a2e7-168c-4cf7-e5d4-24958df493e4"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import os\n","\n","# Updated base project directory\n","PROJECT_BASE = \"/content/drive/MyDrive/YT_Shorts_Project\"\n","\n","# Save final output video in Shorts_Videos inside YouTube_Auto\n","SHORTS_FOLDER = f\"{PROJECT_BASE}/YouTube_Auto/Shorts_Videos\"\n","os.makedirs(SHORTS_FOLDER, exist_ok=True)\n","\n","# Save SEO title output (text) in base folder\n","SEO_OUTPUT_PATH = f\"{PROJECT_BASE}/seo_title.txt\"\n","\n","# Save final video path based on SEO title (we'll define the actual filename later after title is known)\n","def get_output_video_path(seo_title):\n","    clean_title = seo_title.replace(\"_\", \" \").strip()\n","    return f\"{SHORTS_FOLDER}/{clean_title}.mp4\"\n","\n","# Background video folder\n","YT_LONGS_FOLDER = f\"{PROJECT_BASE}/Yt_Longs\"\n","\n","# Audio and music folder\n","AUDIO_FOLDER = f\"{PROJECT_BASE}/audio_folder\"\n","\n","# Background video Google Drive IDs (used only for downloading, not saving)\n","BACKGROUND_VIDEOS = {\n","    \"asmr_videos.mp4\": \"1-K6cqSF0EvQmHkuWTV9JQEDm1w9ZAIII\",\n","    \"asmr_videos_1.mp4\": \"14KRu8DRFVkTcKcMm5nHyDuUNF2Q3gSqj\"\n","}\n","\n","# Background music file ID\n","MUSIC_FILE_ID = \"1NTJkqhggmhp88dub6rJSWXSCyiGnFfRM\"\n"],"metadata":{"id":"LxXCWjvRqAXo","executionInfo":{"status":"ok","timestamp":1750696726863,"user_tz":-330,"elapsed":545,"user":{"displayName":"Ashwin Chintu","userId":"13617122690404780091"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["import google.generativeai as genai\n","import os\n","import time\n","import re\n","\n","# Setup Gemini with your real API key\n","genai.configure(api_key=\"AIzaSyB8raWOTxa0dpzA-ocUN3L-E3wlI1m13Hg\")\n","\n","# -- STORY GENERATION PROMPT --\n","STORY_PROMPT = '''\n","Write a powerful, emotionally gripping, and voiceover-ready story script for YouTube Shorts (90 to 180 seconds long).\n","\n","üéØ Goal:\n","Your story must be emotionally captivating with a proper beginning, middle, and punchy ending. It should feel like a Reddit-style narration with realistic characters, high relatability, a twist or satisfying turn, and a quote-worthy final line.\n","\n","üß† Story Variety Instructions:\n","- 50% of the stories should involve revenge, karma, justice, or clever payback.\n","- The remaining 50% can be from trending Reddit categories like:\n","  ‚Ä¢ \"Things you thought were normal as a kid but weren‚Äôt\"\n","  ‚Ä¢ \"Times your parents messed up but you didn‚Äôt realize until adulthood\"\n","  ‚Ä¢ \"Underdog stories\"\n","  ‚Ä¢ \"Heartbreaks or betrayals\"\n","  ‚Ä¢ \"Life-changing realizations\"\n","- Each story must be unique. Don‚Äôt reuse the same theme or structure repeatedly.\n","\n","üõ†Ô∏è Writing Rules:\n","- Use ONLY narration format ‚Äî no dialogue, no scene or visual cues, no sound descriptions, no parentheses.\n","- Use either first-person or third-person narration.\n","- Structure:\n","    1. Strong Setup (with character background or situation)\n","    2. Rising Tension/Conflict (emotional stakes or injustice)\n","    3. Twist/Reveal (something unexpected or dramatic shift)\n","    4. Satisfying Resolution (revenge, realization, or karma)\n","- Must feel natural when read aloud. Like someone telling a gripping story to a friend.\n","- NO screenplay formatting, no scene instructions, no camera directions.\n","\n","üìå Target Duration:\n","Ensure story is long enough to produce at least **2 minutes of spoken audio** (about 320‚Äì380 words minimum).\n","\n","üí• Ending:\n","End with a strong emotional punch or impactful final thought.\n","\n","DO NOT include any text outside the story narration.\n","'''\n","\n","# -- SEO GENERATION PROMPT --\n","SEO_PROMPT_TEMPLATE = '''\n","You're an SEO expert for YouTube Shorts. Analyze the story below and generate:\n","\n","1. A viral, emotionally hooking YouTube title (max 100 characters)\n","2. A SEO-optimized YouTube description using top search keywords related to revenge, emotions, storytelling, father-son, karma, realization, family, betrayal, and justice.\n","3. A comma-separated list of **high-volume, low-difficulty** SEO tags (max 20).\n","4. A list of hashtags for YouTube Shorts that are relevant and trending.\n","\n","Respond only in the following format:\n","Title: ...\n","Description: ...\n","Tags: ...\n","Hashtags: ...\n","\n","Story:\n","\"\"\"\n","{story_text}\n","\"\"\"\n","'''\n","\n","# -- FUNCTION TO GENERATE STORY --\n","def generate_clean_story():\n","    model = genai.GenerativeModel(\"gemini-1.5-flash\")\n","    for _ in range(3):\n","        try:\n","            response = model.generate_content(STORY_PROMPT)\n","            lines = response.text.strip().splitlines()\n","            return \"\\n\".join([line for line in lines if not line.strip().startswith(\"(\")])\n","        except Exception as e:\n","            time.sleep(60)\n","    return \"ERROR\"\n","\n","# -- FUNCTION TO GENERATE SEO FROM STORY --\n","def generate_seo_from_story(story_text):\n","    model = genai.GenerativeModel(\"gemini-1.5-flash\")\n","    seo_prompt = SEO_PROMPT_TEMPLATE.format(story_text=story_text)\n","    response = model.generate_content(seo_prompt)\n","    return response.text.strip()\n","\n","# --- MAIN LOGIC ---\n","story = generate_clean_story()\n","seo_output = generate_seo_from_story(story)\n","\n","# Extract SEO fields from response\n","title = re.search(r\"Title:\\s*(.*)\", seo_output).group(1)\n","description = re.search(r\"Description:\\s*(.*)\", seo_output).group(1)\n","tags = re.search(r\"Tags:\\s*(.*)\", seo_output).group(1)\n","hashtags = re.search(r\"Hashtags:\\s*(.*)\", seo_output).group(1)\n","\n","# ‚úÖ UPDATED: Save SEO output to YT_Shorts_Project/seo_title.txt\n","SEO_OUTPUT_PATH = \"/content/drive/MyDrive/YT_Shorts_Project/seo_title.txt\"\n","\n","with open(SEO_OUTPUT_PATH, \"w\") as f:\n","    f.write(f\"{title}\\n\\n{description}\\n\\n{tags}\\n\\n{hashtags}\")\n","\n","# Preview output\n","print(\"‚úÖ Title:\", title)\n","print(\"‚úÖ Description:\", description[:100], \"...\")\n","print(\"‚úÖ Tags:\", tags)\n","print(\"‚úÖ Hashtags:\", hashtags)\n","print(\"\\n‚úçÔ∏è Story Preview:\\n\", story[:500], \"...\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":159},"id":"4Y00zIMzqsnx","executionInfo":{"status":"ok","timestamp":1750696917382,"user_tz":-330,"elapsed":8202,"user":{"displayName":"Ashwin Chintu","userId":"13617122690404780091"}},"outputId":"af71c1af-7cbe-4171-fe7c-11220ede53c9"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["‚úÖ Title: Grandpa's Kindness: The Sweetest Revenge! ‚ù§Ô∏è\n","‚úÖ Description: Witness the heartwarming story of a kind shoemaker facing eviction.  His grandson's social media cam ...\n","‚úÖ Tags: revenge story, emotional story, father son, karma, justice, family drama, betrayal, realization, heartwarming story, kindness, social media campaign, eviction, grandpa, underdog story, viral story, feel good story, satisfying ending\n","‚úÖ Hashtags: #Revenge #Karma #Family #Justice #Kindness #Heartwarming #Emotional #StoryTime #Viral #Shorts #ForYou #FYP #Trending #Grandpa #FatherSon #Betrayal\n","\n","‚úçÔ∏è Story Preview:\n"," My grandpa, a quiet man who spent his life mending shoes in a tiny shop, was the kindest soul I knew.  He never complained, always had a smile, even when the rent was overdue and the arthritis in his hands screamed with every stitch.  For years, he‚Äôd been renting his shop from Mr. Henderson, a landlord with a reputation as cold as his heart.  Mr. Henderson, a wealthy man who considered kindness a weakness, regularly hiked the rent, squeezing every last penny from my grandpa.  Then, the eviction  ...\n"]}]},{"cell_type":"code","source":["import requests\n","from gtts import gTTS\n","from pydub import AudioSegment\n","from pydub.utils import mediainfo\n","\n","# ‚úÖ API Keys + Voice IDs\n","ELEVENLABS_API_KEY_1 = \"sk_be61927e7e5da282ef9153fa3b3bd8b08191ecf4c549a5af\"\n","ELEVENLABS_API_KEY_2 = \"sk_e437a6c5d2ee559826ecbfcdaa574743be5f74e860993169\"\n","MALE_VOICE_ID = \"nPczCjzI2devNBz1zQrb\"\n","FEMALE_VOICE_ID = \"21m00Tcm4TlvDq8ikWAM\"\n","\n","# ‚úÖ Correct folder structure for new project\n","AUDIO_FOLDER = \"/content/drive/MyDrive/YT_Shorts_Project/audio_folder\"\n","os.makedirs(AUDIO_FOLDER, exist_ok=True)\n","\n","# ‚úÖ Output paths for audio + subtitles\n","AUDIO_PATH = f\"{AUDIO_FOLDER}/output_audio.mp3\"\n","SRT_PATH = f\"{AUDIO_FOLDER}/final_subtitles.srt\"\n","\n","# === UTILS ===\n","def detect_gender(text):\n","    male_words = [\" he \", \" him \", \" his \", \" man \", \" boy\", \" father\"]\n","    female_words = [\" she \", \" her \", \" woman\", \" girl\", \" mother\"]\n","    m = sum(text.lower().count(w) for w in male_words)\n","    f = sum(text.lower().count(w) for w in female_words)\n","    return 'female' if f > m else 'male'\n","\n","def get_voice_id(story_text):\n","    gender = detect_gender(story_text)\n","    return FEMALE_VOICE_ID if gender == \"female\" else MALE_VOICE_ID\n","\n","# === AUDIO GENERATION ===\n","def generate_audio(text, output_path):\n","    voice_id = get_voice_id(text)\n","    payload = {\n","        \"text\": text,\n","        \"model_id\": \"eleven_monolingual_v1\",\n","        \"voice_settings\": {\n","            \"stability\": 0.4,\n","            \"similarity_boost\": 0.8\n","        }\n","    }\n","    headers = {\n","        \"xi-api-key\": ELEVENLABS_API_KEY_1,\n","        \"Content-Type\": \"application/json\"\n","    }\n","    url = f\"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}\"\n","\n","    try:\n","        response = requests.post(url, headers=headers, json=payload)\n","        if response.ok:\n","            with open(output_path, 'wb') as f:\n","                f.write(response.content)\n","            return \"elevenlabs_api_1\"\n","    except:\n","        pass\n","\n","    headers[\"xi-api-key\"] = ELEVENLABS_API_KEY_2\n","    try:\n","        response = requests.post(url, headers=headers, json=payload)\n","        if response.ok:\n","            with open(output_path, 'wb') as f:\n","                f.write(response.content)\n","            return \"elevenlabs_api_2\"\n","    except:\n","        pass\n","\n","    # GTTS Fallback (1.5x speed)\n","    temp_path = output_path.replace(\".mp3\", \"_gtts.mp3\")\n","    tts = gTTS(text=text)\n","    tts.save(temp_path)\n","\n","    sound = AudioSegment.from_file(temp_path)\n","    faster = sound._spawn(sound.raw_data, overrides={\n","        \"frame_rate\": int(sound.frame_rate * 1.5)\n","    }).set_frame_rate(sound.frame_rate)\n","    faster.export(output_path, format=\"mp3\")\n","    return \"gtts\"\n","\n","# === BASIC WORD TOKENIZER ===\n","def basic_tokenize(text):\n","    text = text.replace('\\n', ' ')\n","    return [w.strip() for w in text.split(' ') if w.strip()]\n","\n","# === SRT GENERATION ===\n","def generate_srt(text, audio_path, output_path):\n","    words = basic_tokenize(text)\n","    duration = float(mediainfo(audio_path)['duration'])\n","    word_duration = duration / len(words)\n","\n","    def format_time(seconds):\n","        ms = int((seconds - int(seconds)) * 1000)\n","        m, s = divmod(int(seconds), 60)\n","        h, m = divmod(m, 60)\n","        return f\"{h:02}:{m:02}:{s:02},{ms:03}\"\n","\n","    with open(output_path, \"w\") as f:\n","        for i, word in enumerate(words):\n","            start = i * word_duration\n","            end = start + word_duration\n","            f.write(f\"{i+1}\\n\")\n","            f.write(f\"{format_time(start)} --> {format_time(end)}\\n\")\n","            f.write(f\"{word}\\n\\n\")\n","\n","# === RUN AUDIO + SUBTITLES ===\n","source = generate_audio(story, AUDIO_PATH)\n","print(\"üîä Audio generated with:\", source)\n","\n","generate_srt(story, AUDIO_PATH, SRT_PATH)\n","print(\"üìÑ Subtitles generated:\", SRT_PATH)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dy4hUfierRV4","executionInfo":{"status":"ok","timestamp":1750697081967,"user_tz":-330,"elapsed":24236,"user":{"displayName":"Ashwin Chintu","userId":"13617122690404780091"}},"outputId":"6b6c3dd0-ba51-4460-889b-f4cafa0f6061"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["üîä Audio generated with: elevenlabs_api_2\n","üìÑ Subtitles generated: /content/drive/MyDrive/YT_Shorts_Project/audio_folder/final_subtitles.srt\n"]}]},{"cell_type":"code","source":["from moviepy.editor import *\n","from google.colab import auth\n","from googleapiclient.discovery import build\n","from googleapiclient.http import MediaIoBaseDownload\n","import google.auth\n","import random\n","import io\n","import os\n","import re\n","\n","# === Authenticate Drive\n","auth.authenticate_user()\n","creds, _ = google.auth.default()\n","drive_service = build('drive', 'v3', credentials=creds)\n","\n","# === Constants\n","SHORTS_OUTPUT_DIR = \"/content/drive/MyDrive/YT_Shorts_Project/YouTube_Auto/Shorts_Videos\"\n","os.makedirs(SHORTS_OUTPUT_DIR, exist_ok=True)\n","\n","TEMP_VIDEO_PATH = \"/content/temp_no_subs.mp4\"\n","BACKGROUND_VIDEOS = {\n","    \"asmr_videos.mp4\": \"1-K6cqSF0EvQmHkuWTV9JQEDm1w9ZAIII\",\n","    \"asmr_videos_1.mp4\": \"14KRu8DRFVkTcKcMm5nHyDuUNF2Q3gSqj\"\n","}\n","MUSIC_FILE_ID = \"1NTJkqhggmhp88dub6rJSWXSCyiGnFfRM\"\n","\n","# === Load SEO title for filename\n","with open(\"/content/drive/MyDrive/YT_Shorts_Project/seo_title.txt\", \"r\") as f:\n","    seo_title = f.readline().strip()\n","\n","# === Sanitize title (keep spaces, remove symbols that break filenames)\n","safe_title = re.sub(r'[\\\\/*?:\"<>|]', \"\", seo_title)\n","FINAL_VIDEO_PATH = os.path.join(SHORTS_OUTPUT_DIR, f\"{safe_title}.mp4\")\n","\n","# === Drive download helper\n","def download_from_drive(file_id, filename):\n","    request = drive_service.files().get_media(fileId=file_id)\n","    with open(filename, \"wb\") as f:\n","        downloader = MediaIoBaseDownload(f, request)\n","        done = False\n","        while not done:\n","            _, done = downloader.next_chunk()\n","\n","# === Step 1: Download background video\n","bg_file, bg_file_id = random.choice(list(BACKGROUND_VIDEOS.items()))\n","bg_local = f\"/content/{bg_file}\"\n","download_from_drive(bg_file_id, bg_local)\n","\n","# === Step 2: Download background music\n","bg_music_path = \"/content/bg_music.mp3\"\n","download_from_drive(MUSIC_FILE_ID, bg_music_path)\n","\n","# === Step 3: Load audio + background music\n","audio = AudioFileClip(AUDIO_PATH)\n","bg_music = AudioFileClip(bg_music_path)\n","duration = audio.duration\n","\n","# Loop + fade music\n","loop_count = int(duration // bg_music.duration) + 1\n","bg_music = concatenate_audioclips([bg_music] * loop_count).subclip(0, duration).volumex(0.05)\n","final_audio = CompositeAudioClip([audio, bg_music])\n","\n","# === Step 4: Trim + crop background video\n","video = VideoFileClip(bg_local)\n","start_time = random.uniform(0, max(0, video.duration - duration))\n","video = video.subclip(start_time, start_time + duration)\n","\n","w, h = video.size\n","target_width = h * 9 / 16\n","x1 = (w - target_width) / 2\n","video = video.crop(x1=x1, x2=x1 + target_width)\n","\n","# === Step 5: Apply final audio\n","video = video.set_audio(final_audio)\n","\n","# === Step 6: Export without subtitles\n","video.write_videofile(TEMP_VIDEO_PATH, fps=30, codec=\"libx264\", audio_codec=\"aac\")\n","\n","# === Step 7: Burn SRT subtitles with ffmpeg\n","!ffmpeg -y -i \"{TEMP_VIDEO_PATH}\" -vf \"subtitles='{SRT_PATH}'\" -c:a copy \"{FINAL_VIDEO_PATH}\"\n","\n","print(\"‚úÖ Final video saved to:\", FINAL_VIDEO_PATH)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3oEdlWIXsIK5","executionInfo":{"status":"ok","timestamp":1750697827975,"user_tz":-330,"elapsed":542771,"user":{"displayName":"Ashwin Chintu","userId":"13617122690404780091"}},"outputId":"21b52f81-53d3-4166-ae5b-57863665ea41"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Moviepy - Building video /content/temp_no_subs.mp4.\n","MoviePy - Writing audio in temp_no_subsTEMP_MPY_wvf_snd.mp4\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["MoviePy - Done.\n","Moviepy - Writing video /content/temp_no_subs.mp4\n","\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Moviepy - Done !\n","Moviepy - video ready /content/temp_no_subs.mp4\n","ffmpeg version 4.4.2-0ubuntu0.22.04.1 Copyright (c) 2000-2021 the FFmpeg developers\n","  built with gcc 11 (Ubuntu 11.2.0-19ubuntu1)\n","  configuration: --prefix=/usr --extra-version=0ubuntu0.22.04.1 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared\n","  libavutil      56. 70.100 / 56. 70.100\n","  libavcodec     58.134.100 / 58.134.100\n","  libavformat    58. 76.100 / 58. 76.100\n","  libavdevice    58. 13.100 / 58. 13.100\n","  libavfilter     7.110.100 /  7.110.100\n","  libswscale      5.  9.100 /  5.  9.100\n","  libswresample   3.  9.100 /  3.  9.100\n","  libpostproc    55.  9.100 / 55.  9.100\n","Input #0, mov,mp4,m4a,3gp,3g2,mj2, from '/content/temp_no_subs.mp4':\n","  Metadata:\n","    major_brand     : isom\n","    minor_version   : 512\n","    compatible_brands: isomiso2avc1mp41\n","    encoder         : Lavf61.1.100\n","  Duration: 00:01:45.10, start: 0.000000, bitrate: 2146 kb/s\n","  Stream #0:0(und): Video: h264 (High 4:4:4 Predictive) (avc1 / 0x31637661), yuv444p, 607x1080, 2007 kb/s, 30 fps, 30 tbr, 15360 tbn, 60 tbc (default)\n","    Metadata:\n","      handler_name    : VideoHandler\n","      vendor_id       : [0][0][0][0]\n","      encoder         : Lavc61.3.100 libx264\n","  Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 129 kb/s (default)\n","    Metadata:\n","      handler_name    : SoundHandler\n","      vendor_id       : [0][0][0][0]\n","Stream mapping:\n","  Stream #0:0 -> #0:0 (h264 (native) -> h264 (libx264))\n","  Stream #0:1 -> #0:1 (copy)\n","Press [q] to stop, [?] for help\n","\u001b[1;32m[Parsed_subtitles_0 @ 0x5cc58d289ec0] \u001b[0mlibass API version: 0x1502000\n","\u001b[1;32m[Parsed_subtitles_0 @ 0x5cc58d289ec0] \u001b[0mlibass source: tarball: 0.15.2\n","\u001b[1;32m[Parsed_subtitles_0 @ 0x5cc58d289ec0] \u001b[0mShaper: FriBidi 1.0.8 (SIMPLE) HarfBuzz-ng 2.7.4 (COMPLEX)\n","\u001b[1;32m[Parsed_subtitles_0 @ 0x5cc58d289ec0] \u001b[0mUsing font provider fontconfig\n","\u001b[1;32m[Parsed_subtitles_0 @ 0x5cc58d289ec0] \u001b[0mfontselect: (Arial, 400, 0) -> /usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf, 0, LiberationSans\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0musing cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mprofile High 4:4:4 Predictive, level 3.1, 4:4:4, 8-bit\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0m264 - core 163 r3060 5db6aa6 - H.264/MPEG-4 AVC codec - Copyleft 2003-2021 - http://www.videolan.org/x264.html - options: cabac=1 ref=3 deblock=1:0:0 analyse=0x3:0x113 me=hex subme=7 psy=1 psy_rd=1.00:0.00 mixed_ref=1 me_range=16 chroma_me=1 trellis=1 8x8dct=1 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=4 threads=3 lookahead_threads=1 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=1 b_bias=0 direct=1 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=40 rc=crf mbtree=1 crf=23.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00\n","Output #0, mp4, to '/content/drive/MyDrive/YT_Shorts_Project/YouTube_Auto/Shorts_Videos/Grandpa's Kindness The Sweetest Revenge! ‚ù§Ô∏è.mp4':\n","  Metadata:\n","    major_brand     : isom\n","    minor_version   : 512\n","    compatible_brands: isomiso2avc1mp41\n","    encoder         : Lavf58.76.100\n","  Stream #0:0(und): Video: h264 (avc1 / 0x31637661), yuv444p(progressive), 607x1080, q=2-31, 30 fps, 15360 tbn (default)\n","    Metadata:\n","      handler_name    : VideoHandler\n","      vendor_id       : [0][0][0][0]\n","      encoder         : Lavc58.134.100 libx264\n","    Side data:\n","      cpb: bitrate max/min/avg: 0/0/0 buffer size: 0 vbv_delay: N/A\n","  Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 129 kb/s (default)\n","    Metadata:\n","      handler_name    : SoundHandler\n","      vendor_id       : [0][0][0][0]\n","frame= 3153 fps= 16 q=-1.0 Lsize=   25761kB time=00:01:45.07 bitrate=2008.5kbits/s speed=0.524x    \n","video:23985kB audio:1666kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.429191%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mframe I:48    Avg QP:20.07  size: 38631\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mframe P:1244  Avg QP:24.10  size: 11909\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mframe B:1861  Avg QP:27.16  size:  4240\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mconsecutive B-frames: 12.9% 19.5% 16.8% 50.7%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mmb I  I16..4: 11.9% 57.8% 30.3%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mmb P  I16..4:  8.5% 22.5%  3.8%  P16..4: 21.6%  6.9%  2.4%  0.0%  0.0%    skip:34.4%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mmb B  I16..4:  1.2%  4.3%  1.0%  B16..8: 23.4%  3.4%  0.6%  direct: 1.5%  skip:64.6%  L0:47.9% L1:47.1% BI: 5.0%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0m8x8 transform intra:64.5% inter:80.6%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mcoded y,u,v intra: 47.0% 21.8% 20.1% inter: 9.2% 3.8% 3.8%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mi16 v,h,dc,p: 29% 24% 10% 37%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mi8 v,h,dc,ddl,ddr,vr,hd,vl,hu: 28% 19% 17%  5%  6%  7%  6%  6%  5%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mi4 v,h,dc,ddl,ddr,vr,hd,vl,hu: 26% 18% 12%  6%  9%  9%  8%  7%  5%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mWeighted P-Frames: Y:2.0% UV:0.9%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mref P L0: 63.1% 16.2% 14.0%  6.6%  0.1%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mref B L0: 87.0% 10.6%  2.4%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mref B L1: 97.0%  3.0%\n","\u001b[1;36m[libx264 @ 0x5cc58d1c7000] \u001b[0mkb/s:1869.44\n","‚úÖ Final video saved to: /content/drive/MyDrive/YT_Shorts_Project/YouTube_Auto/Shorts_Videos/Grandpa's Kindness The Sweetest Revenge! ‚ù§Ô∏è.mp4\n"]}]}]}